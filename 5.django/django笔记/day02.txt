准备：

先将创建项目，参照day01的创建day02项目
配置day02的init.py文件、setting.py文件和添加app项目



首先创建一个数据库表，了解其中一些数据类型
Charfield、IntergerField、BooleanField、DateTimeField等
创建一个数据表（在app的models中）
from datetime import datetime

from django.db import models

# Create your models here.
class Student(models.Model):

    s_name = models.CharField(max_length=10, unique=True, verbose_name='姓名')

    s_age = models.IntegerField(default=16, verbose_name='年龄')

    s_sex = models.BooleanField(default=1, verbose_name='性别')

    # 创建时间
    create_time = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')

    # 操作时间（对数据进行操作时的时间）
    operate_time = models.DateTimeField(auto_now=True, verbose_name='修改时间')

    # def __init__(self, name, age=None, sex=None):
    #     super().__init__()
    #     self.s_name = name
    #     self.s_age = age if age else self.s_age
    #     self.s_sex = sex if sex else  self.s_sex
    #     self.create_time = datetime.now()
    #     self.operate_time = datetime.now()


    class Meta:
        db_table = 'student'




今天的内容：对数据的curd操作
一、create创建数据表
首先在urls.py的urlpaterns中添加  url('create_stu/', views.create_stu),

然后在views.py中创建对应的函数
from django.http import HttpResponse
from django.shortcuts import render

from app.models import Student


def create_stu(request):

    # 创建学生信息
    # 引入ORM概念：对象关系映射
    # 第一种方式
    # Student.objects.create(s_name='xxx')

    # 第二种方法
    stu = Student()
    stu.s_name = 'xm'
    stu.save()

    #第三种
    # stu = Student('sm', 18, 1)
    # stu.save()


    return HttpResponse('创建学生方法')

注：第三种创建方法要使用admin.py中的__init__()的来创建对象，所以在使用时要添加对应的构造函数


二、select 查询数据库
首先在urls.py的urlpaterns中添加  url('select_stu', views.select_stu),

然后在views.py中创建对应的函数
def select_stu(request):

    """
    all: 查询所有
    filter: 获取的结果为queryset,可以返回空，一条或多条数据。
    get: 获取的结果时object对象，如果获取不成功，会报错；如果获取多条数据，也会报错。
    exclude： 不包含
    order_by(): 排序
    """
    # 查询数据
    # all()获取全部
    # select * from student;
    stus = Student.objects.all()
    # filter()条件查询,存在就返回对应值，不存在就返回空
    # select * from student where s_name='sm'
    stus = Student.objects.filter(s_name='sm')
    stu_names = [stu.s_name for stu in stus]
    print(stu_names)

    # get():条件查询，只查询一个，如果有多个就报错
    stus = Student.objects.get(s_age=18)


    # 多条件查询
    # select * from student where s_name='sm' and s_age=16
    stus = Student.objects.filter(s_age=16).filter(s_name='sm')
    stus = Student.objects.filter(s_age=16, s_name='sm')


    # 查询不等于的
    # select * from student where s_namg<>'sm'
    stus = Student.objects.exclude(s_name='sm')


    # 查询并排序,升降
    # select * from student order by id;
    stus = Student.objects.all().order_by('id')  # 升序
    stus = Student.objects.all().order_by('-id')  # 降序


    # values()
    # stus = Student.objects.all().values('id', 's_name', 's_age', 's_sex')
    # return HttpResponse(stus)


    # get(), first()
    # stus = Student.objects.get(id=1)
    stus = Student.objects.filter(id=1).first()

    # last(), first()
    stus = Student.objects.all().order_by('id').first()  # 升序
    stus = Student.objects.all().order_by('-id').last()  # 降序

    stus = Student.objects.all().order_by('id')[1]  # 升序

    # return HttpResponse(stus.id)


    # 其它条件查询
    # select * from student where s_name like '%m%'
    stus = Student.objects.filter(s_name__contains='m')
    # select * from student where s_name like 'm%'
    stus = Student.objects.filter(s_name__startswith='m')
    # select * from student where s_name like '%m'
    stus = Student.objects.filter(s_name__endswith='m')

    # in
    # select * from student where id in (1,2)
    stus = Student.objects.filter(id__in=[1,2])

    # gt,gte 大于，大于等于   lt,lte  小于，小于等于
    stus = Student.objects.filter(s_age__lt=17)

    # pk
    stus = Student.objects.filter(id=1)
    stus = Student.objects.filter(pk=1)

    # Q(),查询姓名叫‘xm’的 或者年龄等于18的
    stus = Student.objects.filter(Q(s_name='xm') | Q(s_age=18))
    # 与 &
    stus = Student.objects.filter(Q(s_name='xm') & Q(s_age=18))
    # 非 ~
    stus = Student.objects.filter(~Q(s_name='xm') | Q(s_age=18))


    # 获取学生的姓名
    stu_names = [(stu.s_name,stu.id) for stu in stus]
    print(stu_names)
    # print(stus)

    return HttpResponse(stu_names)



三、delect  删除数据
首先在urls.py的urlpaterns中添加  url('delete_stu', views.delete_stu),

然后再views中添加delect_stu函数

def delete_stu(request):
    # 删除
    # 第一种方法
    stu = Student.objects.get(pk=6)
    stu.delete()

    # 第二种方法
    Student.objects.filter(id=2).first().delete()

    return HttpResponse('删除')



四、update  修改数据
首先在urls.py的urlpaterns中添加  url('update_stu', views.update_stu),

然后再views中添加update_stu函数

def update_stu(request):
    # 更新
    # 第一种
    stu = Student.objects.get(pk=1)
    stu.s_name = '3x'
    stu.save()

    # 第二种
    Student.objects.filter(id=1).update(s_name='哈哈')

    return HttpResponse('修改')










