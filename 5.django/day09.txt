
今天的主要内容：权限

例子：用户--组--权限

全为多对多关系

一、创建admin用户并分配权限
先添加路由

    # 创建admin用户
    url(r'^create_user/', views.create_user, name='create_user'),
    # 给用户添加权限
    url(r'^add_user_permission/', views.add_user_permission, name='add_user_permission'),

然后创建（关键字：user.user_permissions）

def create_user(request):
    if request.method == 'GET':
        MyUser.objects.create_user(username='admin', password='1234')

        return HttpResponse('创建用户成功')


def add_user_permission(request):
    if request.method == 'GET':
        # 给姓名叫admin的用户添加修改用户名的权限
        # 获取到叫admin的用户
        user = MyUser.objects.filter(username='admin').first()
        # 获取到修改用户名的权限
        per = Permission.objects.filter(codename='change_myuser_username').first()
        # 添加权限
        # user.user_permissions.add(per)

        # 删除权限
        # user.user_permissions.remove(per)

        # 清空权限
        user.user_permissions.clear

        return HttpResponse('添加用户权限成功')



二、给组分配权限和给用户分配组
先路由

    # 给组分配权限
    url(r'^add_group_permission/', views.add_group_permission, name='add_group_permission'),
    # 给admin用户分配审核组
    url(r'^add_user_group/', views.add_user_group, name='add_user_group'),

后创建（关键字：group.permissions和user.add）

def add_group_permission(request):
    if request.method == 'GET':
        # 创建审核组，并分配编辑权限
        group = Group.objects.filter(name='审核组').first()
        if group:
            per_list = ['change_myuser', 'delete_myuser', 'change_myuser_username', 'change_myuser_password']
            # 获取编辑的四个权限
            perms = Permission.objects.filter(codename__in=per_list)
            for per in perms:
                # 添加组和权限之间的关系
                group.permissions.add(per)
                # 删除组和权限之间的关系
                # group.permissions.remove(per)
            return HttpResponse('添加组和权限的关系')
        else:
            # 不存在就创建组
            Group.objects.create(name='审核组')
            return HttpResponse('审核组没有创建，请先创建')


def add_user_group(request):
    if request.method == 'GET':
        # 给admin用户分配审核组
        # 先获取到对应的用户和组
        user = MyUser.objects.filter(username='admin').first()
        group = Group.objects.filter(name='审核组').first()

        # 给admin用户分配审核组
        user.groups.add(group)

        return HttpResponse('分配组成功')


三、查询用户的权限和拥有对应权限的用户才能进入页面的实现，即实现装饰器

添加路由

    # 查询某个用户的权限列表
    url(r'^user_permission/', views.user_permission, name='user_permission'),

    # 进入index.html页面
    url(r'^index/', views.index, name='index')


创建路由（关键字：user.get_group_permissions()\user.get_all_permissions()和@permission_required('app.change_myuser_username')）

# 查询用户的权限
def user_permission(request):
    if request.method == 'GET':
        user = MyUser.objects.filter(username='admin').first()
        # 查询user的权限

        # 1.通过权限直接查询
        per = user.user_permissions.all().values('codename')

        # 2.通过组来查询
        # 方法1：
        perms = user.groups.first().permissions.all().values('codename')

        # 方法2：得到权限集合
        perms2 = user.get_group_permissions()

        # 获取用户所有的权限
        perms_all = user.get_all_permissions()

        return HttpResponse(perms2)


@permission_required('app.change_myuser_username')
def index(request):
    if request.method == 'GET':
        # change_myuser_username
        # return HttpResponse('我是首页，我需要有修改用户名的权限才能访问')
        return render(request, 'index.html')
