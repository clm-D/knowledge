
今天的主要内容：分页功能、图片上传（在day07中）、实现session来代替之前的cookie和user_ticket（在大于08中）

添加model.py中的内容
from django.db import models


class Users(models.Model):
    username = models.CharField(max_length=10, unique=True)
    password = models.CharField(max_length=255, verbose_name='密码')
    icon = models.ImageField(upload_to='upload', null=True, verbose_name='头像')
    create_time = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')
    operate_time = models.DateTimeField(auto_now=True, verbose_name='修改时间')

    class Meta:
        db_table = 'users'


class UserTicket(models.Model):
    user = models.ForeignKey(Users)
    ticket = models.CharField(max_length=30)
    create_time = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')
    max_age = models.IntegerField(verbose_name='存活时间')

    class Meta:
        db_table = 'user_ticket'



一、分页功能
views.py路由中：
def users(request):
    if request.method == 'GET':
        # 使用切片完成分页功能
        # 在数据库中使用offset和limit实现
        # select * from users offset 0 limit 3
        page_number = int(request.GET.get('page', 1))
        # users = Users.objects.all()[3*(page_number-1):3*page_number]
        users = Users.objects.all()

        # 使用Paginator实现分页
        # 实现按照3条数据进行分页
        paginator = Paginator(users, 3)
        # 获取某一页的信息
        page = paginator.page(page_number)

        return render(request, 'users.html', {'page': page})


在users.py中实现分页的其它功能

{% extends 'base.html' %}

{% block title %}
    用户管理
{% endblock %}

{% block content %}
    <p>当前注册的账号</p>
    <table>
        <thead>
            <th>id</th>
            <th>用户名</th>
            <th>创建时间</th>

        </thead>
        <tbody>
            {% for user in page %}
            <tr>
                <td>{{ user.id }}</td>
                <td>{{ user.username }}</td>
                <td>{{ user.create_time|date:'Y-m-d H:i:s' }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <p>当前页：{{ page.number }}</p>
    <p>页码：
        {% for i in page.paginator.page_range %}
        <a href="{% url 'app:users' %}?page={{ i }}">{{ i }}</a>
        {% endfor %}
    </p>
    <p>
        {% if page.has_previous %}
        <a href="{% url 'app:users' %}?page={{ page.previous_page_number }}">上一页</a>
        {% endif %}
        {% if page.has_next %}
        <a href="{% url 'app:users' %}?page={{ page.next_page_number }}">下一页</a>
        {% endif %}
    </p>
{% endblock %}



二、图片上传

pip install pillow
在register.html中添加<form action="" method="post" enctype="multipart/form-data"> 和 <p>头像：<input type="file" name="icon"></p>


在index.html中要获取图片需要添加  <p>头像：<img src="/media/{{ user.icon }}"></p>
添加一个media文件并在setting.py中

# 设置media文件路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

在urls.py中添加

from django.contrib.staticfiles.urls import static

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)




三、使用session、简便之前的代码（request.session['user_id'] = user.id）

其它与之前的大致相同

from datetime import timedelta

from django.contrib.auth.hashers import check_password
from django.http import HttpResponseRedirect
from django.shortcuts import render
from django.urls import reverse

from app.models import Users
from utils.functions import is_login


def login(request):
    if request.method == 'GET':
        return render(request, 'login.html')
    if request.method == 'POST':
        # 使用cookie+session形式实现登录
        username = request.POST.get('username')
        password = request.POST.get('password')
        # all()校验参数，如果列表中有元素为空，则返回False
        if not all([username, password]):
            msg = '请填写完整的参数'
            return render(request, 'login.html', {'msg': msg})
        # 校验是否能通过username和password找到user对象
        user = Users.objects.filter(username=username).first()
        if user:
            # 校验密码
            if not check_password(password, user.password):
                msg = '密码错误'
                return render(request, 'login.html', {'msg': msg})
            else:
                # 之前这里是向cookie中设置，向user_ticket表中设置
                # 现在只需要通过一句话就可以实现，向session和django_session中设置
                request.session['user_id'] = user.id

                # 设置session过期时间
                # request.session.set_expiry(timedelta(days=1))
                request.session.set_expiry(600)

                return HttpResponseRedirect(reverse('app:index'))

        else:
            msg = '用户名错误'
            return render(request, 'login.html', {'msg': msg})


@is_login
def index(request):
    if request.method == 'GET':
        user_id = request.session.get('user_id')
        return render(request, 'index.html')

@is_login
def logout(request):
    if request.method == 'GET':
        # 方法1：注销，删除session和cookie
        # request.session.flush()
        # 方法2：获取session_key 并实现删除
        session_key = request.session.session_key
        request.session.delete(session_key)

        return HttpResponseRedirect(reverse('app:login'))










