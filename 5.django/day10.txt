
今天主要内容：日志和restful
准备工作：models使用最早的dj5数据模型，即如下：

from django.db import models


from django.db import models


class Grade(models.Model):

    # 创建一个班级
    g_name = models.CharField(max_length=10, unique=True, verbose_name='班级名称')

    class Meta:
        db_table = 'grade'


class Course(models.Model):
    c_name = models.CharField(max_length=10, null=True)

    class Meta:
        db_table = 'course'


class StudentInfo(models.Model):
    # 电话号码
    phone = models.CharField(max_length=11, unique=True, null=True, verbose_name='手机号')

    # 地址
    address = models.CharField(max_length=50, null=True, verbose_name='家庭住址')

    class Meta:
        db_table = 'student_info'


# Create your models here.
class Student(models.Model):

    s_name = models.CharField(max_length=10, unique=True, verbose_name='姓名')

    s_age = models.IntegerField(default=16, verbose_name='年龄')

    s_sex = models.BooleanField(default=1, verbose_name='性别')

    is_delete = models.BooleanField(default=0, verbose_name='是否删除')

    # 创建时间
    create_time = models.DateTimeField(auto_now_add=True, verbose_name='创建时间')

    # 操作时间（对数据进行操作时的时间）
    operate_time = models.DateTimeField(auto_now=True, verbose_name='修改时间')

    # 数学成绩
    math = models.DecimalField(max_digits=4, decimal_places=2, null=True)
    # 语文成绩
    chinese = models.DecimalField(max_digits=4, decimal_places=2, null=True)

    # 一对一模型
    stu_info = models.OneToOneField(StudentInfo, null=True)

    # 一对多模型
    g = models.ForeignKey(Grade, null=True, on_delete=models.SET_NULL)

    # 多对多
    c = models.ManyToManyField(Course, null=True)

    class Meta:
        db_table = 'student'


一、日志

首先先创建一个日志文件夹

然后就是在setting中添加配置

# 日志文件夹的路径
LOG_PATH = os.path.join(BASE_DIR, 'logs')

# 配置日志
LOGGING = {
    # 必须是1
    'version': 1,
    # 禁用日志，默认为True,要改为False
    'disable_existing_loggers': False,
    # 定义formatters组件，定义存储日志中的格式
    'formatters':{
        'default': {
            'format': '%(levelno)s %(name)s %(asctime)s %(message)s'
        }
    },
    # 定义loggers组件，用于接收日志信息
    # 并且将日志信息丢给handlers区处理
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO'
        }
    },
    # 定义handlers组件，用户写入日志信息
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filename': '%s/log.txt' % LOG_PATH,
            'formatter': 'default',
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 5 * 1024 * 1024,
        }
    }
}



接下来就是在views中添加logger文件

import logging

logger = logging.getLogger('console')

并在指定的路由中添加

logging.info('index方法')



二、django中使用restful
首先先下载

pip install djangorestframework==3.4.6


pip install django-filter

并安装Postman

然后是在setting.py中的INSTALLED_APPS里添加'rest_framework',

接下来就是在app的urls.py中使用rest_framework.routers


from django.conf.urls import url

from rest_framework.routers import SimpleRouter

from app import views

# 引入路由
router = SimpleRouter()
# 使用router注册的地址
router.register(r'^student', views.StudentView)

urlpatterns = [

]
urlpatterns += router.urls

然后就是在views.py中添加对应的路由实现对学生数据的crud操作


from rest_framework import viewsets, mixins

from app.models import Student
from app.serializers import StudentSerializer


class StudentView(mixins.ListModelMixin,
                  mixins.CreateModelMixin,
                  mixins.DestroyModelMixin,
                  mixins.RetrieveModelMixin,
                  mixins.UpdateModelMixin,
                  viewsets.GenericViewSet):

    # 返回数据
    queryset = Student.objects.all()
    # 序列化结果
    serializer_class = StudentSerializer

    # def perform_destroy(self, instance):
    #     instance.first().update(is_delete=1)


然后创建一个serializers.py文件来实现序列化

from rest_framework import serializers

from app.models import Student


class StudentSerializer(serializers.ModelSerializer):

    class Meta:
        # 指定序列化的模型
        model = Student
        # 指定序列化哪些字段

        fields = ['id', 's_name', 's_age']



请求：

GET（SELECT）：从服务器取出资源（一项或多项）

POST（CREATE）：在服务器新建一个资源

PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）

PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）

DELETE（DELETE）：从服务器删除资源