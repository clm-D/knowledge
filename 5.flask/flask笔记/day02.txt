
今日主要内容：上午：判断是否登录的装饰器（登录校验）、redis、将会话存储在数据库中
	      下午：模板继承、流程控制（for,if,loop,过滤器）、宏定义、User模型定义数据表创建注册方法实现


一、登录校验

from functools import wraps

from flask import session, redirect, url_for


def is_login(func):
    @wraps(func)  # flask中装饰器必须加
    def check(*args, **kwargs):  # 传递可能传输的数据
        try:
            login_status = session.get('login_status')
        except:
            return redirect['app.login']
        return func(*args, **kwargs)
    return check



二、redis、将会话存储在数据库中

首先先要安装redis:pip install redis 和flask-session:pip install flask-session（将会话存储时使用的）

然后是在manage.py中配置redis和flask-session

# session配置
app.config['SESSION_TYPE'] = 'redis'
app.config['SESSION_REDIS'] = redis.Redis(host='127.0.0.1', port=6379)

# 获取session对象，并初始化app
se = Session()
se.init_app(app)

登录的实现和昨天的一样（主要：session['login_status'] = 1）
登录后可以在redis中看到记录



三、模板继承、流程的控制（for,if,loop,过滤器）、宏定义

模板继承和django类似：
不同：模块继承时如果要使用父模板的内容：django: {{ block.super }}
					flask:{{ super() }}
      js和css的引入：第一种：<script src="/static/js/style.js"></script>
		     第二种：<script src="{{ url_for('static', filename='js/style.js') }}"></script>


流程控制、宏定义、：

{% extends 'base_main.html' %}

{% block content %}
    <!--宏定义：无参数情况-->
    {% from 'functions.html' import hello %}
    {{ hello() }}
    <!--宏定义：有参情况-->
    {% from 'functions.html' import say %}
    {{ say('小明', '18', '男', 'address:火星') }}
    <br>

    {{ content_h2 | safe }}
    {{ content_h2 | safe | length }}
    {{ content_h2 | striptags | capitalize }}
    <br>

    <!--Jinja2中没有ifequal-->
    {% for scores in stu_scores %}
        <p {% if loop.first %} style="color:red;" {% endif %}>
            序号：{{ loop.revindex }}
            成绩：{{ scores }}
            循环：{{ loop.first }}
        </p>
    {% endfor %}

{% endblock %}

其中宏定义的调用类似python中的模块调用：

{% macro hello() %}
    <p>你好，大兄弟！</p>
{% endmacro %}

{% macro say(name) %}
    <p>你好，{{ name }}！</p>
{% endmacro %}



四、User模型定义数据表创建注册方法实现

使用MySQL数据库：先要下载MySQL：pip install pymysql 和 flask-sqlalchemy:pip install flask-sqlalchemy

首先是模型的定义：

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()


class User(db.Model):
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    username = db.Column(db.String(10), unique=True, nullable=False)
    password = db.Column(db.String(128), nullable=False)
    # 如果不写tablename参数，在数据库中表名是什么？
    __tablename__ = 'user'



然后是配置数据库：

# 数据库的配置, dialect+driver://username:password@host:port/database
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://root:1234@127.0.0.1:3306/flask5'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# 绑定app和db
db.init_app(app)


接下来就是初始化数据库表（将模型添加进入数据库中）

@blue.route('/create_db/', methods=['GET'])
def create_db():
    db.create_all()
    return '创建表成功'



最后有数据库后就可以实现注册功能：

@blue.route('/register/', methods=['GET', 'POST'])
def register():
    if request.method == 'GET':
        return render_template('register.html')
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        if not all([username, password]):
            msg = '用户名或密码不能为空'
            return render_template('register.html', msg=msg)
        # 保存注册信息
        user = User()
        user.username = username
        # 密码加密
        user.password = generate_password_hash(password)
        # 保存
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('app.login'))
